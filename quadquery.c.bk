#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include "quadtree.h"

#define DEBUG 1

static void stripnl(char *str) {
    while(strlen(str) && ((str[strlen(str) - 1] == 13) || (str[strlen(str) - 1] == 10))) {
        str[strlen(str) - 1] = 0;
    }
}

static void parse(Point *point, char* line) {
    char *p;
    p = strtok(line, ",");
    point->x = atof(p);
    p = strtok(NULL, ",");
    point->y = atof(p);
    p = strtok(NULL, ",");
    point->z = atof(p);
}

static void parseBBox(BoundingBox *bbox, char* line) {
    char *p;
    p = strtok(line, ",");
    bbox->west = atof(p);
    p = strtok(NULL, ",");
    bbox->east = atof(p);
    p = strtok(NULL, ",");
    bbox->south = atof(p);
    p = strtok(NULL, ",");
    bbox->north = atof(p);
}


int main() {
    QuadTree *tree = createQuadTree(0.0, 450.0, 0.0, 200.0, NULL);

    FILE *infile;
    char fname[40];
    char line[100];

    /* Read in the filename */
    printf("Enter name of the data file: ");
    fgets(fname, sizeof(fname), stdin);

    /* We need to get rid of the newline char. */
    stripnl(fname);

    /* Open the file.  If NULL is returned there was an error */
    if((infile = fopen(fname, "r")) == NULL) {
        printf("Error Opening File.\n");
        exit(1);
    }

    long count = 1;

    printf("Reading File....\n");

    while(fgets(line, sizeof(line), infile) != NULL) {
        Point *point = createPoint(0.0, 0.0, 0.0);
        parse(point, line);
        insert(tree, point);
        count++;
        if (count % 50000 == 0) 
            printf("loaded %ld points....\n", count);
        free(point); //we dont' need anymore b/c it was deep copied
    }
    printf("loaded %ld points\n", count);

    fclose(infile);  /* Close the file */

    BoundingBox *bbox;
    ResultsSet *results; 

    while(1) {

        char queryString[60];
        char answer[4];

        printf("enter points seperated by commas [west,east,south,north]: ");
        fgets(queryString, sizeof(queryString), stdin);

        bbox = createBoundingBox(0.0, 0.0, 0.0, 0.0);

        stripnl(queryString);
        parseBBox(bbox, queryString);

        if (DEBUG) 
            printf("parsed bbox\n");

        results = createResultsSet();

        clock_t start = clock();

        if (DEBUG) 
            printf("querying...\n");

        query(results, tree, bbox);
        if (DEBUG) 
            printf("done...\n");

        double elapsed = ((double)clock() - start) / CLOCKS_PER_SEC;

        printf("Found %d points\n", results->index);
        printf("Query time: %f milliseconds\n", elapsed*1000);
        printf("Would you like to see them? [y/n]: ");
        fgets(answer, sizeof(answer), stdin);
        stripnl(answer);
        if (answer[0] == 'y')
            printResults(results);

        free(results);
        free(bbox);

    }

    return 0;

}
